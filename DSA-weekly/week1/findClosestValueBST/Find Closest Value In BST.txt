Find Closest Value In BST

  Description
  
  Write a function that takes in the root of a Binary Search Tree (BST) and a target integer
  value and returns the closest value to that target value contained in the BST.
  
  You can assume that there will only be one closest value.

  Each BST node has an integer value, a
  left child node, and a right child node. A node is
  said to be a valid BST node if and only if it satisfies the BST
  property: its value is strictly greater than the values of every
  node to its left; its value is less than or equal to the values
  of every node to its right; and its children nodes are either valid
  BST nodes themselves or undefined / null.

Sample Input

tree =   10
       /     \
      5      15
    /   \   /   \
   2     5 13   22
 /           \
1            14

root = {
	value: 10,
	left: {value: 5.....},
	right: {value: 15.....}
};

target = 12

  Sample Output

13

  Function Declaration

const findClosestValueInBst = (root, target) => {
  
}

  Target Complexity

Average: O(log(n)) time | O(1) space - where n is the number of nodes in the BST
Worst: O(n) time | O(1) space - where n is the number of nodes in the BST